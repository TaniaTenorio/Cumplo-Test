{"version":3,"sources":["Components/Header.jsx","Components/SectionTitle.jsx","Components/Banks.jsx","Views/BanksContainer.jsx","Components/Branches.jsx","Views/BranchesContainer.jsx","Views/EmployeesContainer.jsx","Components/Employees.jsx","Components/EmployeeForm.jsx","Views/QuinnWileyContainer.jsx","Views/HedleyToddContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","className","SectionTitle","props","section","Banks","name","to","BanksContainer","state","banks","isFetched","fetch","then","response","json","banksJson","setState","this","map","bank","key","pk","Component","Branches","href","BranchesContainer","branches","path","branchesJson","results","console","log","branch","id","EmployeesContainer","onClick","Employees","middleName","lastName","validate","values","errors","test","EmployeeForm","onSubmit","e","preventDefault","noErrors","result","Object","keys","length","onChange","target","value","type","placeholder","QuinnWileyContainer","employees","employeesJson","employee","middle_name","last_name","HedleyToddContainer","pageForward","newEmployees","post","postData","App","basename","process","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76b9683c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return(\n        <h1 className=\"main-title green-background align-center\">My Banking System</h1>\n    )\n};\n\nexport default Header;","import React from 'react';\n\nfunction SectionTitle(props) {\n    return(\n        <div className=\"section-title\">\n            <h2>{props.section}</h2>\n        </div>\n    )\n}\n\nexport default SectionTitle;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Banks(props) {\n    return(\n        <div className=\"bank-card\">\n            <h1>Bank: </h1>\n            <p>{props.name}</p>\n            <Link to=\"/branches\">Info</Link>\n        </div>\n    )\n}\n\nexport default Banks;","import React, { Component } from 'react';\n\nimport Header from '../Components/Header';\nimport SectionTitle from '../Components/SectionTitle';\nimport Banks from '../Components/Banks';\n\nexport default class BanksContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            banks: [],\n            isFetched: true,\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://tryouts-cumplo.herokuapp.com/banks/')\n            .then(response => response.json())\n            .then(banksJson => this.setState({banks: banksJson, isFetched: false}))\n    }\n    \n    render() {\n        if(this.state.isFetched) {\n            return 'Loading...'\n        }\n        \n        //const bankName = this.state.banks[0].name;\n        // console.log(bankName);\n        return (\n            <div>\n                <Header />\n                <SectionTitle section=\"My Banks\"/>\n                <div className=\"bank-card-container gray-background\">\n                    {this.state.banks.map(((bank) => <Banks name={bank.name} key={bank.pk}/>))}\n                </div>\n            </div>\n        )    \n}\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Branches(props) {\n    return(\n        <div className=\"branch-card\">\n            <h1>{props.name}</h1>\n            <p>Bank: {props.bank}</p>\n            <Link to={props.href}>Employees</Link>\n        </div>\n    )\n}\n\nexport default Branches;","import React, { Component, Fragment } from 'react';\n\nimport Header from '../Components/Header';\nimport SectionTitle from '../Components/SectionTitle';\nimport Branches from '../Components/Branches'\n\nexport default class BranchesContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            branches: [],\n            path: [],\n            isFetched: true,\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/branches/\")\n            .then(response => response.json())\n            .then(branchesJson => this.setState({branches: branchesJson.results}))\n    }\n    render() {\n        console.log(this.state)\n        // if(this.state.isFetched) {\n        //     return 'Loading...'\n        // }\n        return(\n            <Fragment>\n                <Header />\n                <SectionTitle section=\"My Branches\" />\n                <div className=\"branch-card-container gray-background\">\n                    {this.state.branches.map((branch => <Branches name={branch.name} key={branch.id} bank={branch.bank} href={branch.name}/>))}\n                </div>\n            </Fragment>\n        )\n        }\n    }\n    \n","import React, { Component } from 'react';\n\nexport default class EmployeesContainer extends Component {\n    \n    \n    render() {\n        \n        return(\n            <div className=\"employees-container\">\n                <h3>Employees</h3>\n                <button onClick={this.props.onClick}>Next page</button>\n            </div>\n        )\n    }\n};","import React from 'react';\n\nfunction Employees(props) {\n    return(\n        <div>\n            <p>{props.name} {props.middleName} {props.lastName}</p>\n        </div>\n    )\n};\n\nexport default Employees;","import React, { Component } from 'react';\n\n\nconst validate = values => {\n    const regex = /^[A-Za-zÁÉÍÓÚáéíóúñÑ ]+$/g;\n    const errors = {};\n    console.log(values);\n    if(!values.name){\n        errors.name = 'This field is required'\n    } else if (!regex.test(values.name)){\n        errors.name = 'Special characters not accepted. Only accents and spaces'\n    }\n    if(!values.lastName){\n        errors.lastName = 'This field is required'\n    // } else if (!regex.test(values.lastName)){\n    //     errors.lastName = 'Special characters not accepted. Only accents and spaces'\n    }\n    if(!values.branch){\n        errors.branch = 'This field is required'\n    } \n    // else if (!regex.test(values.branch)){\n    //     errors.branch = 'Special characters not accepted. Only accents and spaces'\n    // }\n    return errors;\n}\n\nexport default class EmployeeForm extends Component {\n    state = {\n        errors: {}\n    }\n    // async postData() {\n    //     try \n    // }\n\n    onSubmit = e => {\n        e.preventDefault();\n        const{ errors, ...noErrors } = this.state;\n        const result = validate(noErrors);\n        this.setState({ errors: result })\n        if(!Object.keys(result).length){\n            console.log(\"Succeed, new employee registered\")\n        }\n\n    }\n\n    onChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value,\n            //[e.target.number]: e.target.value\n        })\n    }\n    render(){\n        //console.log(this.props);\n        const { errors } = this.state;\n        return(\n            <div className=\"form-container\">\n                <h1>Register new employee</h1>\n                <form onSubmit={this.onSubmit}>\n                        <input\n                            className=\"form-input\"\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            value={this.state.name} \n                            onChange={this.onChange}\n                            />  <br />\n                        {errors.name && <p>{errors.name}</p>}\n                        <input\n                            className=\"form-input\"\n                            name=\"middleName\"\n                            type=\"text\" \n                            placeholder=\"Middle Name\"\n                            value={this.state.middleName} \n                            onChange={this.onChange}\n                            /> <br />\n                        {errors.middleName && <p>{errors.middleName}</p>}\n                        <input\n                            className=\"form-input\"\n                            name=\"lastName\"\n                            type=\"text\" \n                            placeholder=\"Last Name\"\n                            value={this.state.lastName} \n                            onChange={this.onChange}/> <br />\n                        {errors.lastName && <p>{errors.lastName}</p>}\n                        <input\n                            className=\"form-input\"\n                            name=\"branch\"\n                            type=\"text\" \n                            placeholder=\"Branch\"\n                            value={this.state.branch} \n                            onChange={this.onChange}\n                            />\n                        {errors.branch && <p>{errors.branch}</p>}\n                    <br />\n                    <br />\n                        <input \n                        className=\"form-input\"\n                        type=\"submit\"\n\n                        value=\"Send\" />\n                </form>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\n\nimport Header from '../Components/Header';\nimport SectionTitle from '../Components/SectionTitle';\nimport Employees from '../Components/Employees';\nimport EmployeeForm from '../Components/EmployeeForm';\n\nexport default class QuinnWileyContainer extends Component  {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/employees/\")\n            .then(response => response.json())\n            .then(employeesJson => this.setState({employees: employeesJson.results}))\n    };\n    \n    render() {\n        // if(this.state.isFetched) {\n        //     return 'Loading...'\n        // }\n        console.log(this.state.employees)\n\n        return(\n            <div>\n                <Header />\n                <SectionTitle section=\"Quinn Wiley\" />\n            {this.state.employees.map((employee) => {\n                if(employee.branch ===1){\n                    const employeeTemplate = <Employees name={employee.name} middleName={employee.middle_name} lastName={employee.last_name}key={employee.id}/>\n                    return employeeTemplate\n                }\n            })}\n             <EmployeeForm />\n            </div>\n        )\n    }\n};","import React, { Component } from 'react';\n\nimport Header from '../Components/Header';\nimport SectionTitle from '../Components/SectionTitle';\nimport Employees from '../Components/Employees';\nimport EmployeeForm from '../Components/EmployeeForm';\nimport EmployeesContainer from '../Views/EmployeesContainer';\n\nexport default class HedleyToddContainer extends Component  {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/employees/?\")\n            .then(response => response.json())\n            .then(employeesJson => this.setState({employees: employeesJson.results}))\n        //console.log(this.state)\n    };\n\n    pageForward = () => {\n        fetch('https://tryouts-cumplo.herokuapp.com/employees/?page=2')\n            .then(response => response.json())\n            .then(employeesJson => {\n                const newEmployees = employeesJson.results;\n                // console.log(newEmployees)\n                this.setState({employees:  newEmployees})\n                console.log(this.state)\n            })\n            console.log(this.state);\n        \n    }\n\n    render() {\n        return(\n            <div>\n                <Header />\n                <SectionTitle section=\"Hedley Todd\" />\n                <EmployeesContainer onClick={this.pageForward}/>\n            {this.state.employees.map((employee) => {\n                if(employee.branch === 3){\n                    const employeeTemplate = <Employees name={employee.name} middleName={employee.middle_name} lastName={employee.last_name}key={employee.id}/>\n                    return employeeTemplate\n                }\n            })}\n             <EmployeeForm post={this.postData}/>\n            </div>\n        )\n    }\n};","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport BanksContainer from './Views/BanksContainer';\nimport BranchesContainer from './Views/BranchesContainer';\nimport EmployeesContainer from './Views/EmployeesContainer';\nimport QuinnWileyContainer from './Views/QuinnWileyContainer';\nimport HedleyToddContainer from './Views/HedleyToddContainer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" component={BranchesContainer} />\n      <Route path=\"/banks\" component={BanksContainer} />\n      <Route path=\"/employees\" component={EmployeesContainer} />\n      <Route path=\"/Quinn Wiley\" component={QuinnWileyContainer} />\n      <Route path=\"/Hedley Todd\" component={HedleyToddContainer} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}