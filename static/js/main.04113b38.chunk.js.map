{"version":3,"sources":["Components/Banks.jsx","Views/BanksContainer.jsx","Components/Branches.jsx","Views/BranchesContainer.jsx","Views/EmployeesContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Banks","props","name","to","BanksContainer","state","banks","isFetched","fetch","then","response","json","banksJson","setState","this","map","bank","key","pk","Component","Branches","BranchesContainer","branches","path","branchesJson","results","console","log","branch","id","EmployeesContainer","App","basename","process","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAYeA,MATf,SAAeC,GACX,OACI,6BACI,sCAAYA,EAAMC,MAClB,kBAAC,IAAD,CAAMC,GAAG,gBCHAC,E,YACjB,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTC,MAAO,GACPC,WAAW,GAJA,E,iFAQE,IAAD,OAChBC,MAAM,+CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAI,EAAKC,SAAS,CAACP,MAAOM,EAAWL,WAAW,S,+BAInE,OAAGO,KAAKT,MAAME,UACH,aAKPO,KAAKT,MAAMC,MAAMS,KAAK,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAOd,KAAMc,EAAKd,KAAMe,IAAKD,EAAKE,Y,GAtBhCC,aCS7BC,MAVf,SAAkBnB,GACd,OACI,6BACI,uCACA,2BAAIA,EAAMC,MACV,oCAAUD,EAAMe,QCJPK,E,YACjB,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTiB,SAAU,GACVC,KAAM,IAJK,E,iFAQE,IAAD,OAChBf,MAAM,kDACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAe,GAAY,OAAI,EAAKX,SAAS,CAACS,SAAUE,EAAaC,e,+BAIhE,OADAC,QAAQC,IAAIb,KAAKT,OACdS,KAAKT,MAAME,UACH,aAGPO,KAAKT,MAAMiB,SAASP,KAAK,SAAAa,GAAM,OAAI,kBAAC,EAAD,CAAU1B,KAAM0B,EAAO1B,KAAMe,IAAKW,EAAOC,GAAIb,KAAMY,EAAOZ,c,GApB1DG,aCF1BW,E,iLAEb,OACI,6BACI,8C,GAJgCX,a,MCiBjCY,MAVf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,gBAChB,kBAAC,IAAD,CAAOC,OAAK,EAACX,KAAK,IAAIY,UAAW/B,IACjC,kBAAC,IAAD,CAAOmB,KAAK,YAAYY,UAAWd,IACnC,kBAAC,IAAD,CAAOE,KAAK,aAAaY,UAAWL,MCFtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.04113b38.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Banks(props) {\n    return(\n        <div>\n            <h1>Banco: {props.name}</h1>\n            <Link to=\"/branches\" />\n        </div>\n    )\n}\n\nexport default Banks;","import React, { Component } from 'react';\n\nimport Banks from '../Components/Banks';\n\nexport default class BanksContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            banks: [],\n            isFetched: true,\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://tryouts-cumplo.herokuapp.com/banks/')\n            .then(response => response.json())\n            .then(banksJson => this.setState({banks: banksJson, isFetched: false}))\n    }\n    \n    render() {\n        if(this.state.isFetched) {\n            return 'Loading...'\n        }\n        //const bankName = this.state.banks[0].name;\n        // console.log(bankName);\n        return (\n            this.state.banks.map((bank => <Banks name={bank.name} key={bank.pk}/>))\n            // <Banks name={bankName} />\n        )\n    }\n}","import React from 'react';\n// import { Link } from 'react-router-dom';\n\nfunction Branches(props) {\n    return(\n        <div>\n            <h1>Branch:</h1>\n            <p>{props.name}</p>\n            <p>Bank: {props.bank}</p>\n        </div>\n    )\n}\n\nexport default Branches;","import React, { Component } from 'react';\n\nimport Branches from '../Components/Branches'\n\nexport default class BranchesContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            branches: [],\n            path: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/branches/\")\n            .then(response => response.json())\n            .then(branchesJson => this.setState({branches: branchesJson.results}))\n    }\n    render() {\n        console.log(this.state)\n        if(this.state.isFetched) {\n            return 'Loading...'\n        }\n        return(\n            this.state.branches.map((branch => <Branches name={branch.name} key={branch.id} bank={branch.bank}/>))\n            //<Branches name=\"branch\" />\n        )\n        }\n    }\n    \n","import React, { Component } from 'react';\n\nexport default class EmployeesContainer extends Component {\n    render() {\n        return(\n            <div>\n                <h1>\n                    Empleados\n                </h1>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport BanksContainer from './Views/BanksContainer';\nimport BranchesContainer from './Views/BranchesContainer';\nimport EmployeesContainer from './Views/EmployeesContainer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" component={BanksContainer} />\n      <Route path=\"/branches\" component={BranchesContainer} />\n      <Route path=\"/employees\" component={EmployeesContainer} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}