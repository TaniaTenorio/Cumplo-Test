{"version":3,"sources":["Components/Header.jsx","Components/Banks.jsx","Views/BanksContainer.jsx","Components/Branches.jsx","Views/BranchesContainer.jsx","Components/Employees.jsx","Components/EmployeeForm.jsx","Views/EmployeesContainer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","className","Banks","props","name","to","BanksContainer","state","banks","isFetched","fetch","then","response","json","banksJson","setState","this","map","bank","key","pk","Component","Branches","BranchesContainer","branches","path","branchesJson","results","console","log","branch","id","Employees","middleName","lastName","EmployeeForm","number","onSubmit","e","preventDefault","localStorage","setItem","JSON","stringify","history","push","onChange","target","value","type","placeholder","withRouter","EmployeesContainer","employees","employeesJson","employee","middle_name","last_name","App","basename","process","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6f10e79.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return(\n        <h1 className=\"main-title green-background align-center\">My Banking System</h1>\n    )\n};\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Banks(props) {\n    return(\n        <div className=\"bank-card\">\n            <h1>Bank: </h1>\n            <p>{props.name}</p>\n            <Link to=\"/branches\">Info</Link>\n        </div>\n    )\n}\n\nexport default Banks;","import React, { Component } from 'react';\n\nimport Header from '../Components/Header';\nimport Banks from '../Components/Banks';\n\nexport default class BanksContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            banks: [],\n            isFetched: true,\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://tryouts-cumplo.herokuapp.com/banks/')\n            .then(response => response.json())\n            .then(banksJson => this.setState({banks: banksJson, isFetched: false}))\n    }\n    \n    render() {\n        if(this.state.isFetched) {\n            return 'Loading...'\n        }\n        //const bankName = this.state.banks[0].name;\n        // console.log(bankName);\n        return (\n            <div>\n                <Header />\n                <div className=\"bank-card-container\">\n                    {this.state.banks.map(((bank) => <Banks name={bank.name} key={bank.pk}/>))}\n                </div>\n            </div>\n        )    \n}\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Branches(props) {\n    return(\n        <div className=\"branch-card\">\n            <h1>Branch:</h1>\n            <p>{props.name}</p>\n            <p>Bank: {props.bank}</p>\n            <Link to=\"/employees\">Employees</Link>\n        </div>\n    )\n}\n\nexport default Branches;","import React, { Component, Fragment } from 'react';\n\nimport Header from '../Components/Header';\nimport Branches from '../Components/Branches'\n\nexport default class BranchesContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            branches: [],\n            path: [],\n            isFetched: true,\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/branches/\")\n            .then(response => response.json())\n            .then(branchesJson => this.setState({branches: branchesJson.results}))\n    }\n    render() {\n        console.log(this.state)\n        // if(this.state.isFetched) {\n        //     return 'Loading...'\n        // }\n        return(\n            <Fragment>\n                <Header />\n                <div className=\"branch-card-container\">\n                    {this.state.branches.map((branch => <Branches name={branch.name} key={branch.id} bank={branch.bank}/>))}\n                </div>\n            </Fragment>\n        )\n        }\n    }\n    \n","import React from 'react';\n\nfunction Employees(props) {\n    return(\n        <div>\n            <p>Name: {props.name} {props.middleName} {props.lastName}</p>\n            <p>Branch:</p>\n        </div>\n    )\n};\n\nexport default Employees;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass EmployeeForm extends Component {\n    state = {\n        name: '',\n       number: '',\n    }\n    onSubmit = e => {\n        e.preventDefault();\n        localStorage.setItem('clientes', JSON.stringify(this.state));\n        this.props.history.push('/Sidebar');\n        //console.log(JSON.parse(localStorage.getItem('clientes')));\n        //this.props.agregarClientes(this.state.name);\n    }\n    onChange = e => {\n        // console.log(e.target.name);\n        this.setState({\n            [e.target.name]: e.target.value,\n            //[e.target.number]: e.target.value\n        })\n    }\n    render(){\n        //console.log(this.props);\n        \n        return(\n            <form onSubmit={this.onSubmit}>\n                    <input\n                        name=\"name\"\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        value={this.state.name} \n                        onChange={this.onChange}/>  <br />\n                    <input\n                        name=\"middle-name\"\n                        type=\"text\" \n                        placeholder=\"Middle Name\"\n                        value={this.state.number} \n                        onChange={this.onChange}/> <br />\n                    <input\n                        name=\"last-name\"\n                        type=\"text\" \n                        placeholder=\"Last Name\"\n                        value={this.state.number} \n                        onChange={this.onChange}/> <br />\n                    <input\n                        name=\"branch\"\n                        type=\"text\" \n                        placeholder=\"Branch\"\n                        value={this.state.number} \n                        onChange={this.onChange}/>\n                <br />\n                <br />\n                    <button> Registrar </button>\n            </form>\n        )\n    }\n}\n\nexport default withRouter(EmployeeForm);","import React, { Component, Fragment } from 'react';\n\nimport Header from '../Components/Header';\nimport Employees from '../Components/Employees';\nimport EmployeeForm from '../Components/EmployeeForm';\n\nexport default class EmployeesContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://tryouts-cumplo.herokuapp.com/employees/\")\n            .then(response => response.json())\n            .then(employeesJson => this.setState({employees: employeesJson.results}))\n    };\n    \n    render() {\n        // if(this.state.isFetched) {\n        //     return 'Loading...'\n        // }\n        console.log(this.state.employees[0])\n\n        return(\n            <Fragment>\n                <Header />\n            {this.state.employees.map((employee) => <Employees name={employee.name} middleName={employee.middle_name} lastName={employee.last_name}key={employee.id}/>)}\n             <EmployeeForm />\n            </Fragment>\n        )\n    }\n};","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport BanksContainer from './Views/BanksContainer';\nimport BranchesContainer from './Views/BranchesContainer';\nimport EmployeesContainer from './Views/EmployeesContainer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\" component={BanksContainer} />\n      <Route path=\"/branches\" component={BranchesContainer} />\n      <Route path=\"/employees\" component={EmployeesContainer} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}